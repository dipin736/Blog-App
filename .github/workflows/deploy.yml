name: Deploy on AWS

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Dockerhub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/blog:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/blog:latest

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.AWS_EC2_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.AWS_EC2_IP }} >> ~/.ssh/known_hosts

    - name: Deploy on AWS EC2 
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.AWS_EC2_IP }} << 'EOF'
          # Log in to Docker Hub
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

          # Create a docker-compose.yml file
          cat <<EOL > docker-compose.yml
          version: '3.8'

          services:
            db:
              image: mysql:5.7
              environment:
                MYSQL_ROOT_PASSWORD: \${{ secrets.MYSQL_ROOT_PASSWORD }} # Use secrets for sensitive data
                MYSQL_DATABASE: \${{ secrets.MYSQL_DATABASE }}
                MYSQL_USER: \${{ secrets.MYSQL_USER }}
                MYSQL_PASSWORD: \${{ secrets.MYSQL_PASSWORD }}
              ports:
                - "3306:3306"
              volumes:
                - db_data:/var/lib/mysql

            web:
              image: ${{ secrets.DOCKER_USERNAME }}/blog:latest
              command: python ./Backend/blog_project/manage.py runserver 0.0.0.0:8000
              ports:
                - "8000:8000"
              depends_on:
                - db
              environment:
                - DATABASE_NAME=\${{ secrets.MYSQL_DATABASE }}
                - DATABASE_USER=\${{ secrets.MYSQL_USER }}
                - DATABASE_PASSWORD=\${{ secrets.MYSQL_PASSWORD }}
                - DATABASE_HOST=db

          volumes:
            db_data:
          EOL

          # Start the containers
          docker-compose up -d
        EOF

        # Optional: Clean up old Docker images to save space
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.AWS_EC2_IP }} << 'EOF'
          docker image prune -f
        EOF

    # Optional: Add a step for notifications or logging after deployment
    - name: Notify Deployment Success
      run: echo "Deployment to AWS EC2 completed successfully!"
